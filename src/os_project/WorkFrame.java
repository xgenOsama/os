package os_project;

import java.awt.Color;
import java.awt.FlowLayout;
import java.awt.Font;
import java.awt.ScrollPane;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollBar;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.plaf.BorderUIResource;
import javax.swing.table.DefaultTableModel;
import sun.awt.EventQueueDelegate;

/**
 *
 * @author genosama
 */
public class WorkFrame extends javax.swing.JFrame {

    /**
     * Creates new form WorkFrame
     */
    public int numProcess;
    public Thread t1;
    public int Xpanel = 0, Ypanel = 0;
    public Vector<String> tabelHeaders;
    public Vector<Vector> tabelData;
    public DefaultTableModel tabelmodel;
    
    public WorkFrame(final int numProcess) {

        setTitle("Result Frame ..");
        initComponents();
        jpContainer.setAutoscrolls(true);
        jpContainer.add(new JScrollBar());
        tabelHeaders = new Vector<String>(Arrays.asList(new String[]{
            "Name", "Burst", "Arrival","StartTime", "Finish", "T.A", "W.T"
        }));

        tabelData = new Vector<Vector>();
        tabelmodel = new DefaultTableModel(tabelData, tabelHeaders);
        tabelShow.setModel(tabelmodel);
        this.numProcess = numProcess;
        jlProcess = new JLabel[numProcess];
        jtfArrival = new JTextField[numProcess];
        jtfBurstTime = new JTextField[numProcess];

        setLocationRelativeTo(null);
        t1 = new Thread(new Runnable() {

            @Override
            public void run() {
                initLabels(numProcess);
                initTextFields(numProcess);

            }

        });
        t1.start();

        addWindowListener(new WindowAdapter() {

            public void windowOpened(WindowEvent we) {

                try {
                    t1.join();

                } catch (InterruptedException ex) {
                    Logger.getLogger(WorkFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
        try {
            t1.join();
        } catch (InterruptedException ex) {
            Logger.getLogger(WorkFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        initButton();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jpContainer = new javax.swing.JPanel();
        jbtCalc = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jtfQuantum = new javax.swing.JTextField();
        jbtChart = new javax.swing.JButton();
        jbtInfo = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tabelShow = new javax.swing.JTable();
        jbtReSize = new javax.swing.JButton();
        jtfATA = new javax.swing.JLabel();
        jtfAWT = new javax.swing.JLabel();

        jLabel1.setText("jLabel1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jpContainer.setBackground(new java.awt.Color(133, 242, 201));

        jbtCalc.setText("Do Round Robben");
        jbtCalc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtCalcActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Ubuntu", 1, 18)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(139, 125, 125));
        jLabel2.setText("Enter quantum :");

        jtfQuantum.setFont(new java.awt.Font("Ubuntu", 1, 18)); // NOI18N
        jtfQuantum.setMargin(new java.awt.Insets(0, 0, 0, 20));

        jbtChart.setText("Chart");

        jbtInfo.setText("Info");

        tabelShow.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(tabelShow);

        jbtReSize.setText("ReSize");
        jbtReSize.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtReSizeActionPerformed(evt);
            }
        });

        jtfATA.setBackground(new java.awt.Color(200, 194, 180));
        jtfATA.setFont(new java.awt.Font("Ubuntu", 0, 24)); // NOI18N
        jtfATA.setForeground(new java.awt.Color(66, 26, 218));
        jtfATA.setText("A.T.A :");

        jtfAWT.setFont(new java.awt.Font("Ubuntu", 0, 24)); // NOI18N
        jtfAWT.setForeground(new java.awt.Color(64, 28, 203));
        jtfAWT.setText("A.W.T:");

        javax.swing.GroupLayout jpContainerLayout = new javax.swing.GroupLayout(jpContainer);
        jpContainer.setLayout(jpContainerLayout);
        jpContainerLayout.setHorizontalGroup(
            jpContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 834, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jpContainerLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jpContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jtfAWT, javax.swing.GroupLayout.DEFAULT_SIZE, 196, Short.MAX_VALUE)
                    .addComponent(jtfATA, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jpContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jbtCalc, javax.swing.GroupLayout.DEFAULT_SIZE, 142, Short.MAX_VALUE)
                    .addComponent(jtfQuantum)
                    .addComponent(jbtChart, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jbtInfo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jbtReSize, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jpContainerLayout.setVerticalGroup(
            jpContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpContainerLayout.createSequentialGroup()
                .addGroup(jpContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jpContainerLayout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jtfQuantum, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jpContainerLayout.createSequentialGroup()
                        .addGap(32, 32, 32)
                        .addComponent(jtfATA, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jtfAWT, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jbtCalc, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jbtChart, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jbtInfo, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jbtReSize, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 29, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jpContainer, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jpContainer, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    private void jbtCalcActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtCalcActionPerformed

    }//GEN-LAST:event_jbtCalcActionPerformed

    private void jbtReSizeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtReSizeActionPerformed
        new LogFrame().setVisible(true);
        hide();
    }//GEN-LAST:event_jbtReSizeActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(WorkFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(WorkFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(WorkFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(WorkFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
//                new WorkFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton jbtCalc;
    private javax.swing.JButton jbtChart;
    private javax.swing.JButton jbtInfo;
    private javax.swing.JButton jbtReSize;
    private javax.swing.JPanel jpContainer;
    private javax.swing.JLabel jtfATA;
    private javax.swing.JLabel jtfAWT;
    private javax.swing.JTextField jtfQuantum;
    private javax.swing.JTable tabelShow;
    // End of variables declaration//GEN-END:variables
    public JLabel[] jlProcess = new JLabel[numProcess];
    public String[] Heads = {"Processes", "BurstTime", "Arrival"};
    public JLabel[] jlHead = new JLabel[3];

    private void initLabels(int numProcess) {
        for (int i = 0; i < 3; i++) {
            JLabel lb = new JLabel(Heads[i]);
            lb.setBounds(20 + (i * 90), 20, 90, 10);
            jlHead[i] = lb;
            jpContainer.add(jlHead[i]);

        }
        for (int i = 0; i < jlProcess.length; i++) {
            JLabel lb = new JLabel("P" + (i + 1));

            lb.setBounds(50, (i + 1) * 35, 40, 20);
            jlProcess[i] = lb;
            jpContainer.add(lb);

        }
    }
    public JTextField[] jtfBurstTime;
    public JTextField[] jtfArrival;

    private void initTextFields(int numProcess) {
        for (int i = 0; i < numProcess; i++) {
            JTextField jtext = new JTextField();
            jtext.setBounds(110, (i + 1) * 35, 60, 25);
            jtfBurstTime[i] = jtext;
            jpContainer.add(jtfBurstTime[i]);

        }
        for (int i = 0; i < numProcess; i++) {
            JTextField jtext = new JTextField();
            jtext.setBounds(190, (i + 1) * 35, 60, 25);
            jtfArrival[i] = jtext;
            jpContainer.add(jtfArrival[i]);
            Ypanel = (i + 1) * 35;
        }

    }

    public int[] getBurst;
    public int[] getArrival;

    private void getTextboxsValues() {
        getBurst = new int[numProcess];
        getArrival = new int[numProcess];
        for (int i = 0; i < numProcess; i++) {
            getBurst[i] = Integer.parseInt(jtfBurstTime[i].getText());
            getArrival[i] = Integer.parseInt(jtfArrival[i].getText());

        }
    }
    public int QuantumValue;
    //// Array to put startTime 
    public int[] startTime;
    //// Array to put finishTime 
    public int[] finishTime;
    ///// Array to put turnArroundTime 
    public int[] TurnArround;
    ////// Array to put name of processs 
    public String[] processName;
    public int[] waitTime;
    public ArrayList<String> show;
    //// Array to putThe Running time 
    public int[] RunningTime;

    
    private void initButton() {
        jbtInfo.addActionListener(new ActionListener() {
////                 tabelHeaders = new Vector<String>(Arrays.asList(new String[]{}));

            @Override
            public void actionPerformed(ActionEvent e) {
                if (tabelmodel.getRowCount() > 0) {
                    for (int i = tabelmodel.getRowCount() - 1; i > -1; i--) {
                        tabelmodel.removeRow(i);
                    }
                }
                float aver=0f , wait =0f ;
                for (int i = 0; i < numProcess; i++) {
                    TurnArround[i] = finishTime[i] - getArrival[i];
                    aver+= TurnArround[i];
                    waitTime[i] = TurnArround[i] - RunningTime[i];
                    wait+=waitTime[i];
                }
                aver /= numProcess;
                wait /= numProcess;
                for (int i = 0; i < numProcess; i++) {

                    Vector<String> row = new Vector<String>();
                    row.add(processName[i]);
                    row.add(RunningTime[i] + "");
                    row.add(getArrival[i] + "");
                    row.add(startTime[i]+"");
                    row.add(finishTime[i] + "");
                    row.add(TurnArround[i] + "");
                    row.add(waitTime[i] + "");
                    tabelData.add(row);

                }
                tabelmodel = new DefaultTableModel(tabelData, tabelHeaders);

                tabelShow.setModel(tabelmodel);
                tabelShow.setForeground(Color.red);
                String x = "A.T.A:"+" "+aver ;
                jtfATA.setText(x);
                String y = "A.W.T:"+" "+wait;
                jtfAWT.setText(y);
                tabelShow.validate();
                jpContainer.validate();

            }
        });
        jbtChart.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                JPanel flow  = new JPanel(new FlowLayout(5));
                flow.setBounds(Xpanel + 20, Ypanel + 50, 600, 90);
                for (int i = 0; i < show.size(); i++) {
                    JLabel set = new JLabel(show.get(i) + " ");
                    if (set.getText().startsWith("P")) {
                        set.setForeground(Color.green);
                        set.setBackground(new Color(100));
                        set.setFont(new Font(null, 17, 17));

                    } else {
                        set.setForeground(Color.blue);
                        set.setFont(new Font(null, 12, 12));
                    }
                    flow.add(set);
                }
                jpContainer.add(flow);
                jpContainer.revalidate();

            }
        });
        jbtCalc.addActionListener(new ActionListener() {

            @Override
            
            public void actionPerformed(ActionEvent ae) {
               
                startTime = new int[numProcess];
                finishTime = new int[numProcess];
                TurnArround = new int[numProcess];
                waitTime = new int[numProcess];
                try {
                    ////get quantumValue ...
                    QuantumValue = Integer.parseInt(jtfQuantum.getText());
                    ///// get the values of textboxes .....
                    getTextboxsValues();
                    //// get the names of process ... 
                    getProcessName();
                    ///// sort the process belongs to the arrival .
                    sort();
                    ///// do round robin ... 
                    doCalcultaions();
                    //     printShow();

                } catch (Exception ex) {
                    JOptionPane.showMessageDialog(null, ex.getMessage());
                }
            }

            private void sort() {

                for (int j = 1; j < getArrival.length; j++) {
                    int akey = getArrival[j];
                    int bkey = getBurst[j];
                    String nkey = processName[j];
                    int i = j - 1;
                    while (i > -1 && getArrival[i] > akey) {
                        getArrival[i + 1] = getArrival[i];
                        getBurst[i + 1] = getBurst[i];
                        processName[i + 1] = processName[i];
                        i--;
                    }
                    getArrival[i + 1] = akey;
                    getBurst[i + 1] = bkey;
                    processName[i + 1] = nkey;
                }

            }

            private void doCalcultaions() {
                RunningTime = getBurst.clone();
                int counter = 0 ;
                int start = 0;
                int FinishTime = 0;
                show = new ArrayList<String>();
                show.add("(" + 0 + ")");
                while (true) {

                    for (int i = 0; i < numProcess; i++) {
                        if (getBurst[i] == 0) {
                            continue;
                        }
                        if (getArrival[i] > FinishTime) {
                            continue;
                        }
                        if (getBurst[i] >= QuantumValue) {
                            if (counter == 0) {
                               startTime[i] = start ; 
                            }
                            getBurst[i] -= QuantumValue;
                            FinishTime += QuantumValue;
                            show.add(processName[i]);
                            show.add("(" + FinishTime + ")");
                            start += QuantumValue ;
                        } else {
                            if (counter == 0 ) {
                                startTime[i] = start ;
                            }
                            
                            FinishTime += getBurst[i];
                            start+= getBurst[i];  
                            getBurst[i] -= getBurst[i];
                            show.add(processName[i]);
                            show.add("(" + FinishTime + ")");
                        }
                        ////// if to but the finish time .... 
                        if (getBurst[i] == 0) {
                            finishTime[i] = FinishTime;
                        }
                    }
                    counter++;
                    int sum = 0;
                    for (int i = 0; i < numProcess; i++) {
                        sum += getBurst[i];
                    }
                    if (sum == 0) {
                        break;
                    }
                }
                
                jpContainer.revalidate();
                getBurst = RunningTime.clone();

            }

            private void getProcessName() {
                processName = new String[numProcess];
                for (int i = 0; i < numProcess; i++) {
//                        System.out.println("enter");
                    processName[i] = jlProcess[i].getText();
//                        System.out.println("go");
                }
            }
        });
    }
   
}
